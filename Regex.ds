using std;

namespace Automata
{
    /// <summary>
    /// Defines a regex state, which is used in conjunction with reference equality.
    /// </summary>
    public class RegexState
    {
        /// <summary>
        /// Creates a unique regex state.
        /// </summary>
        public const this();
    }

    /// <summary>
    /// Defines a generic regular expression.
    /// </summary>
    public interface IRegex
    {
        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// </summary>
        const ENFAutomaton<RegexState, string> ToENFAutomaton();
        /// <summary>
        /// Gets this regex's string representation.
        /// </summary>
        const string ToString();
    }

    /// <summary>
    /// Defines a literal regex, which is a regex that matches a single symbol.
    /// </summary>
    public struct LiteralRegex : IRegex
    {
        /// <summary>
        /// Creates a literal regex for the given symbol.
        /// </summary>
        public const this(set string Literal);

        /// <summary>
        /// Gets the literal regex's literal or symbol.
        /// </summary>
        public string Literal;

        public const string ToString()
        {
            return Literal;
        }

        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// The construction is as follows:
        ///    start literal end.
        /// where 'start' is the initial state, 'end' is an accepting state,
        /// and 'literal' is this regex' literal.
        /// </summary>
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var startState = new RegexState();
            var acceptingStates = new LinearSet<RegexState>();
            acceptingStates.Add(new RegexState());
            var transitions = new unordered_map<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();
            var label = new pair<RegexState, Optional<string>>(startState, new Optional<string>(Literal));
            transitions[label] = acceptingStates;
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>(transitions);
            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }

    /// <summary>
    /// Defines an epsilon regex, which matches the empty string.
    /// </summary>
    public struct EpsilonRegex : IRegex
    {
        public const this();

        public const string ToString()
        {
            return "\\e";
        }

        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// The construction is as follows:
        ///    start -> end.
        /// where 'start' is the initial state, 'end' is an accepting state,
        /// and '->' is an epsilon-transition.
        /// </summary>
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var startState = new RegexState();
            var acceptingStates = new LinearSet<RegexState>();
            acceptingStates.Add(new RegexState());
            var transitions = new unordered_map<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();
            var label = new pair<RegexState, Optional<string>>(startState, new Optional<string>());
            transitions[label] = acceptingStates;
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>(transitions);
            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }

    /// <summary>
    /// Defines a phi regex, which matches nothing.
    /// </summary>
    public struct PhiRegex : IRegex
    {
        public const this();

        public const string ToString()
        {
            return "\\p";
        }

        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// The construction is as follows:
        ///    start.
        /// where 'start' is the initial state. There are no transitions, and no
        /// accepting states.
        /// </summary>
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var startState = new RegexState();
            var acceptingStates = new LinearSet<RegexState>();
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();
            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }
}
