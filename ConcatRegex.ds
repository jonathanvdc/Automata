using std;

namespace Automata
{
    /// <summary>
    /// A regular expression that represents the concatenation of two other regular
    /// expressions.
    /// </summary>
    public struct ConcatRegex : IRegex
    {
        /// <summary>
        /// Creates a new concat regex for the given operands.
        /// </summary>
        public const this(set IRegex Left, set IRegex Right);

        /// <summary>
        /// The concat regex's left operand.
        /// </summary>
        public IRegex Left;
        /// <summary>
        /// The concat regex's right operand.
        /// </summary>
        public IRegex Right;

        public const string ToString()
        {
            string result;
            if (Left is UnionRegex)
            {
                result = "(" + Left.ToString() + ")";
            }
            else result = Left.ToString();
            if (Right is UnionRegex)
            {
                result += "(" + Right.ToString() + ")";
            }
            else result += Right.ToString();
            return result;
        }

        /// <summary>
        /// Creates an epsilon-nfa for this concatenation regex.
        /// The construction is as follows:
        ///   * Automata are constructed for the left and right operands of this concat operation.
        ///   * These automata are "merged":
        ///     * The start state of the resulting automaton is the start state
        ///       of the left operand's automaton.
        ///     * The accepting states of the resulting automaton is the set of accepting
        ///       states of the right operand's automaton.
        ///   * For each accepting state in the left automaton, an epsilon-transition
        ///     is added to the resulting automaton that starts at said accepting
        ///     state and points to the right automaton's intial state.
        /// </summary>
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();

            var leftAutomaton = Left.ToENFAutomaton();
            var rightAutomaton = Right.ToENFAutomaton();

            var startState = new RegexState();

            transTable.Add(leftAutomaton.TransitionFunction);
            transTable.Add(rightAutomaton.TransitionFunction);

            var label = new pair<RegexState, Optional<string>>(startState, new Optional<string>());
            var leftStartStates = new LinearSet<RegexState>();
            leftStartStates.Add(leftAutomaton.StartState);
            transTable.Add(label, leftStartStates);

            var leftEndStates = leftAutomaton.AcceptingStates;
            var rightStartStates = new LinearSet<RegexState>();
            rightStartStates.Add(rightAutomaton.StartState);
            foreach (var item in leftEndStates.Items)
            {
                var pipeTransition = new pair<RegexState, Optional<string>>(item, new Optional<string>());
                transTable.Add(pipeTransition, rightStartStates);
            }

            var acceptingStates = rightAutomaton.AcceptingStates;

            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }
}
