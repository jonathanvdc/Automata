using std;

namespace Automata
{
    /// <summary>
    /// Defines a regex type that represents the closure of a given regex,
    /// which matches the language of said regex zero or more times.
    /// </summary>
    public struct ClosureRegex : IRegex
    {
        /// <summary>
        /// Creates a new closure regex from the given regex.
        /// </summary>
        public const this(set IRegex Regex);

        /// <summary>
        /// The closure regex' inner regex.
        /// </summary>
        public IRegex Regex;

        public const string ToString()
        {
            return "(" + Regex.ToString() + ")" + "*";
        }

        /// <summary>
        /// Creates an epsilon-nfa for this closure regex.
        /// The construction is as follows:
        ///   * An automaton is constructed for the closure regex' inner regex.
        ///   * A new start state and a single accepting state are created.
        ///   * An automaton is created that consists of:
        ///     * The inner regex' automaton
        ///     * The new start and accepting states
        ///     * epsilon transitions that connect the inner automaton's start and
        ///       end states with the new automaton's start and end states.
        ///       Also, a "loop" is created to facilitate the closure.
        /// </summary>
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();

            var innerAutomaton = Regex.ToENFAutomaton();

            transTable.Add(innerAutomaton.TransitionFunction);

            var startState = new RegexState();
            var endState = new RegexState();

            var label = new pair<RegexState, Optional<string>>(startState, new Optional<string>());
            var starTrans = new LinearSet<RegexState>();
            starTrans.Add(innerAutomaton.StartState);
            starTrans.Add(endState);
            transTable.Add(label, starTrans);

            var innerEndStates = innerAutomaton.AcceptingStates;

            foreach (var item in innerEndStates.Items)
            {
                var pipeLabel = new pair<RegexState, Optional<string>>(item, new Optional<string>());
                transTable.Add(pipeLabel, starTrans);
            }

            var acceptingStates = new LinearSet<RegexState>();
            acceptingStates.Add(endState);

            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }
}
