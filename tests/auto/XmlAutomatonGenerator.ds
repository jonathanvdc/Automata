using System;
using System.Collections.Generic;
using System.Text;

namespace Automata
{
    public static class XmlAutomatonGenerator : IAutomatonGenerator
    {
        private void WriteArray(StringBuilder sb, string TagName, [char] Values)
        {
            sb.Append("<");
            sb.Append(TagName);
            sb.Append(">");
            bool isFirst = true;
            foreach (var item in Values)
            {
                if (isFirst) isFirst = false;
                else sb.Append(",");

                sb.Append(item);
            }
            sb.Append("</");
            sb.Append(TagName);
            sb.Append(">");
            sb.AppendLine();
        }

        public string GenerateNFA(Random rand, char[] alpha, int maxStates, bool AllowEpsilon)
        {
            var states = AutoTests.GenerateStates(rand, maxStates);

            var sb = new StringBuilder();

            if (AllowEpsilon)
                sb.AppendLine("<TYPE>enfa</TYPE>");
            else
                sb.AppendLine("<TYPE>nfa</TYPE>");

            WriteArray(sb, "STATES", states);
            WriteArray(sb, "SYMBOLS", alpha);
            WriteArray(sb, "STARTSTATE", new char[] { AutoTests.GetRandomElement<char>(states, rand) });

            int acceptCount = rand.Next(0, states.Length);
            var accepted = new HashSet<char>();
            for (int i = 0; i < acceptCount; i++)
            {
                accepted.Add(AutoTests.GetRandomElement<char>(states, rand));
            }
            WriteArray(sb, "ACCEPTSTATES", accepted);

            int transCount = rand.Next(0, 2 * states.Length * alpha.Length);
            sb.AppendLine("<TRANSITIONFUNCTION>");

            for (int i = 0; i < transCount; i++)
            {
                char fromState = AutoTests.GetRandomElement<char>(states, rand);
                char toState = AutoTests.GetRandomElement<char>(states, rand);

                string transName;
                if (AllowEpsilon && rand.Next(0, 3) == 0)
                {
                    transName = "E";
                }
                else transName = (string)AutoTests.GetRandomElement<char>(alpha, rand);

                sb.Append("<T>");
                sb.Append(fromState);
                sb.Append(",");
                sb.Append(transName);
                sb.Append(",");
                sb.Append(toState);
                sb.Append("</T>").AppendLine();
            }

            sb.AppendLine("</TRANSITIONFUNCTION>");

            return (string)sb;
        }
    }
}
