using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Automata
{
    public static class GraphvizAutomatonGenerator : IAutomatonGenerator
    {
        private void WriteArray(StringBuilder sb, string TagName, [char] Values)
        {
            sb.Append(TagName);
            sb.Append(" = \"");
            bool isFirst = true;
            foreach (var item in Values)
            {
                if (isFirst) isFirst = false;
                else sb.Append(" ");

                sb.Append(item);
            }
            sb.Append("\";");
            AppendIndentedLine(sb);
        }

        private void WriteStateArray(StringBuilder sb, string TagName, [char] Values)
        {
            if (!Enumerable.Any<char>(Values))
            {
                return;
            }

            AppendIndentedLine(sb, "node [shape = " + TagName + "];");
            bool isFirst = true;
            foreach (var item in Values)
            {
                if (isFirst) isFirst = false;
                else sb.Append(" ");

                sb.Append('"');
                sb.Append(item);
                sb.Append('"');
            }
            sb.Append(";");
            AppendIndentedLine(sb);
        }

        private void AppendIndentedLine(StringBuilder sb)
        {
            sb.AppendLine();
            sb.Append("    ");
        }

        private void AppendIndentedLine(StringBuilder sb, string Text)
        {
            sb.AppendLine(Text);
            sb.Append("    ");
        }

        public const string OutputNFA(NFA Automaton, bool AllowEpsilon)
        {
            var states = Automaton.States;

            var sb = new StringBuilder();

            AppendIndentedLine(sb, "digraph graph1 {");

            if (AllowEpsilon)
                AppendIndentedLine(sb, "type = \"ENFA\";");
            else
                AppendIndentedLine(sb, "type = \"NFA\";");

            AppendIndentedLine(sb);
            WriteArray(sb, "alphabet", Automaton.Alphabet);
            AppendIndentedLine(sb);
            WriteArray(sb, "start", new char[] { Automaton.StartState });
            AppendIndentedLine(sb);

            WriteStateArray(sb, "circle", Enumerable.Except<char>(states, Automaton.FinalStates));
            AppendIndentedLine(sb);
            WriteStateArray(sb, "doublecircle", Automaton.FinalStates);
            AppendIndentedLine(sb);

            AppendIndentedLine(sb, "invStart [style = invis];");
            AppendIndentedLine(sb, "invStart -> \"" + Automaton.StartState + "\";");
            sb.AppendLine();

            foreach (var item in Automaton.Transitions)
            {
                sb.Append("    ");
                sb.Append('"');
                sb.Append(item.Item1);
                sb.Append('"');
                sb.Append(" -> ");
                sb.Append('"');
                sb.Append(item.Item3);
                sb.Append("\" [label = \"");
                if (item.Item2 != '\0')
                {
                    sb.Append(item.Item2);
                }
                sb.Append("\"];");
                sb.AppendLine();
            }

            sb.AppendLine("}");

            return (string)sb;
        }
    }
}
